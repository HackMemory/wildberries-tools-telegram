from calendar import c
from data import config
from .consts import InlineConstructor
from typing import List
from .callbacks import *

class InlineMenu(InlineConstructor):

    @staticmethod
    def back_menu_button():
        schema = [1]
        btns = [
            {'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]
        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def start_menu():
        schema = [1]
        btns = [
            {'text': 'üéõÔ∏è–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]
        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def main_menu(has_token: bool):
        btns = []
        schema = [1, 1]

        if has_token: 
            btns.append({'text': '‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω', "cb": menu_cd.new(action="main-menu-remove-token", data="void") })
            btns.append({'text': 'üìñ–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã', "cb": menu_cd.new(action="main-menu-items", data="void")})
            schema.append(1)
            schema.append(1)
        else:
            btns.append({'text': '‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', "cb": menu_cd.new(action="main-menu-add-token", data="void") })
            schema.append(1)

        btns.append({'text': 'üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', "cb": menu_cd.new(action="main-menu-profile", data="void")})
        btns.append({'text': 'üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', "cb": menu_cd.new(action="main-menu-balance", data="void")})

        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def items_list(items: List, total_count, page = 0, per_page = 10):
        schema = []
        btns = []

        has_next_page = (total_count//per_page) + 1 > int(page) + 1

        for i in range(0, len(items)):     
            btns.append({"text": items[i]["value"], 'cb': item_cd.new(action="select-item", data=items[i]["id"], page=page)})
            schema.append(1)

        page_schema = 0
        if page != 0:
            btns.append({"text": '‚¨ÖÔ∏è', 'cb': menu_cd.new(action="page", data=page-1)})
            page_schema += 1

        if has_next_page:
            btns.append({"text": '‚û°Ô∏è', 'cb': menu_cd.new(action="page", data=page+1)})
            page_schema += 1

        btns.append({'text': '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –Ω–æ–º–µ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã', "cb": menu_cd.new(action="menu-item-custom", data="void") })
        btns.append({"text": '‚óÄÔ∏è–í –º–µ–Ω—é', 'cb': menu_cd.new(action="main-menu-back", data="void")})
        schema.append(page_schema)
        schema.append(1)
        schema.append(1)

        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def token_confirm():
        schema = [2]
        btns = [
            {'text': '‚úÖ–î–∞', "cb": menu_cd.new(action="token-yes", data="void") },
            {'text': '‚ùå–ù–µ—Ç', "cb": menu_cd.new(action="main-menu-back", data="void") },
        ]
        return InlineMenu._create_kb(btns, schema)


    @staticmethod
    def before_item_choose():
        schema = [1, 1, 1]
        btns = [
            {'text': '–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', "cb": menu_cd.new(action="menu-items-choose", data="void") },
            {'text': '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –Ω–æ–º–µ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã', "cb": menu_cd.new(action="menu-item-custom", data="void") },
            {'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]
        return InlineMenu._create_kb(btns, schema)


    @staticmethod
    def item_menu(page = 0, item_id = 0, country = 'void'):
        schema = [1, 1]
        btns = [
            {'text': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', "cb": changename_cd.new(a="icn", data=item_id, c=country) },
            {'text': '‚óÄÔ∏è–ù–∞–∑–∞–¥', "cb": menu_cd.new(action="page", data=page) }
        ]
        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def item_menu_custom(item_id = 0, country = 'void'):
        schema = [1, 1]
        btns = [
            {'text': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', "cb": changename_cd.new(a="icn", data=item_id, c=country) },
            {'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]
        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def confirm_country(item_id = 0):
        schema = [1, 1]
        btns = [
            {'text': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', "cb": menu_cd.new(action="country-list", data=item_id) },
            {'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]
        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def country_list_char(item_id = 0):
        schema = [8, 8, 8, 2, 1]
        btns = [
            {'text': '–ê', "cb": changename_cd.new(a="scc", data=item_id, c='–ê') },
            {'text': '–ë', "cb": changename_cd.new(a="scc", data=item_id, c='–ë') },
            {'text': '–í', "cb": changename_cd.new(a="scc", data=item_id, c='–í') },
            {'text': '–ì', "cb": changename_cd.new(a="scc", data=item_id, c='–ì') },
            {'text': '–î', "cb": changename_cd.new(a="scc", data=item_id, c='–î') },
            {'text': '–ï', "cb": changename_cd.new(a="scc", data=item_id, c='–ï') },
            {'text': '–ó', "cb": changename_cd.new(a="scc", data=item_id, c='–ó') },
            {'text': '–ò', "cb": changename_cd.new(a="scc", data=item_id, c='–ò') },
            
            {'text': '–ô', "cb": changename_cd.new(a="scc", data=item_id, c='–ô') },
            {'text': '–ö', "cb": changename_cd.new(a="scc", data=item_id, c='–ö') },
            {'text': '–õ', "cb": changename_cd.new(a="scc", data=item_id, c='–õ') },
            {'text': '–ú', "cb": changename_cd.new(a="scc", data=item_id, c='–ú') },
            {'text': '–ù', "cb": changename_cd.new(a="scc", data=item_id, c='–ù') },
            {'text': '–û', "cb": changename_cd.new(a="scc", data=item_id, c='–û') },
            {'text': '–ü', "cb": changename_cd.new(a="scc", data=item_id, c='–ü') },
            {'text': '–†', "cb": changename_cd.new(a="scc", data=item_id, c='–†') },

            {'text': '–°', "cb": changename_cd.new(a="scc", data=item_id, c='–°') },
            {'text': '–¢', "cb": changename_cd.new(a="scc", data=item_id, c='–¢') },
            {'text': '–£', "cb": changename_cd.new(a="scc", data=item_id, c='–£') },
            {'text': '–§', "cb": changename_cd.new(a="scc", data=item_id, c='–§') },
            {'text': '–•', "cb": changename_cd.new(a="scc", data=item_id, c='–•') },
            #{'text': '–¶', "cb": changename_cd.new(a="scc", data=item_id, c='–¶') },
            {'text': '–ß', "cb": changename_cd.new(a="scc", data=item_id, c='–ß') },
            {'text': '–®', "cb": changename_cd.new(a="scc", data=item_id, c='–®') },
            
            {'text': '–≠', "cb": changename_cd.new(a="scc", data=item_id, c='–≠') },
            {'text': '–Æ', "cb": changename_cd.new(a="scc", data=item_id, c='–Æ') },
            {'text': '–Ø', "cb": changename_cd.new(a="scc", data=item_id, c='–Ø') },

            {'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]
        return InlineMenu._create_kb(btns, schema)

    @staticmethod
    def country_list(country_list: List, item_id = 0):
        schema = []
        btns = []

        for name in country_list:
            if len(name["key"]) > 25: continue

            btns.append({'text': name["key"], "cb": changename_cd.new(a="sc", data=item_id, c=name["key"]) })
            schema.append(1)

        btns.append({'text': '‚óÄÔ∏è–ù–∞–∑–∞–¥', "cb": menu_cd.new(action="country-list", data=item_id) })
        schema.append(1)
        
        return InlineMenu._create_kb(btns, schema)
        

    @staticmethod
    def select_payment():
        schema = [1]
        btns = []

        for i in range(len(config.prices)):
            btns.append({'text': config.prices[i].label, "cb": menu_cd.new(action="select-payment", data=i) })
            schema.append(1)

        btns.append({'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") })
        return InlineMenu._create_kb(btns, schema)


    @staticmethod
    def payment_button():
        schema = [1, 1]
        btns = [
            {'text': '–û–ø–ª–∞—Ç–∏—Ç—å', "pay": True },
            {'text': '‚óÄÔ∏è–í –º–µ–Ω—é', "cb": menu_cd.new(action="main-menu-open", data="void") }
        ]

        return InlineMenu._create_kb(btns, schema)